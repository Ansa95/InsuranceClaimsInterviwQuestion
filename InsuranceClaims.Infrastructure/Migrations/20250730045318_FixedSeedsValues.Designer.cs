// <auto-generated />
using System;
using InsuranceClaims.Infrastructure.Persistance.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InsuranceClaims.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250730045318_FixedSeedsValues")]
    partial class FixedSeedsValues
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("InsuranceClaims.Domain.Entities.Claim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ClaimAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PolicyId")
                        .HasColumnType("int");

                    b.Property<int>("PolicyholderId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("SubmittedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmittedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PolicyId");

                    b.HasIndex("PolicyholderId");

                    b.HasIndex("SubmittedByUserId");

                    b.ToTable("Claims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 500m,
                            ClaimAmount = 500m,
                            CreatedDate = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Hospitalization due to accident",
                            PolicyId = 1,
                            PolicyholderId = 1,
                            Status = 0,
                            SubmittedByUserId = 1,
                            SubmittedOn = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("InsuranceClaims.Domain.Entities.Policy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CoverageDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PolicyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PolicyNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("PremiumAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PolicyNumber")
                        .IsUnique();

                    b.ToTable("Policies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CoverageDetails = "Covers hospitalization",
                            EndDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PolicyName = "Health Policy A",
                            PolicyNumber = "P123456",
                            PremiumAmount = 1000m,
                            StartDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("InsuranceClaims.Domain.Entities.PolicyPolicyholder", b =>
                {
                    b.Property<int>("PolicyId")
                        .HasColumnType("int");

                    b.Property<int>("PolicyholderId")
                        .HasColumnType("int");

                    b.HasKey("PolicyId", "PolicyholderId");

                    b.HasIndex("PolicyholderId");

                    b.ToTable("PolicyPolicyholders");
                });

            modelBuilder.Entity("InsuranceClaims.Domain.Entities.Policyholder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ContactInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Policyholders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ContactInfo = "john@example.com",
                            FullName = "John Doe"
                        });
                });

            modelBuilder.Entity("InsuranceClaims.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PasswordHash = "hashed-password",
                            Role = "Hospital",
                            Username = "hospital1"
                        });
                });

            modelBuilder.Entity("InsuranceClaims.Domain.Entities.Claim", b =>
                {
                    b.HasOne("InsuranceClaims.Domain.Entities.Policy", "Policy")
                        .WithMany("Claims")
                        .HasForeignKey("PolicyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InsuranceClaims.Domain.Entities.Policyholder", "Policyholder")
                        .WithMany("Claims")
                        .HasForeignKey("PolicyholderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InsuranceClaims.Domain.Entities.User", "SubmittedByUser")
                        .WithMany("SubmittedClaims")
                        .HasForeignKey("SubmittedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Policy");

                    b.Navigation("Policyholder");

                    b.Navigation("SubmittedByUser");
                });

            modelBuilder.Entity("InsuranceClaims.Domain.Entities.PolicyPolicyholder", b =>
                {
                    b.HasOne("InsuranceClaims.Domain.Entities.Policy", "Policy")
                        .WithMany("PolicyPolicyholders")
                        .HasForeignKey("PolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InsuranceClaims.Domain.Entities.Policyholder", "Policyholder")
                        .WithMany("PolicyPolicyholders")
                        .HasForeignKey("PolicyholderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Policy");

                    b.Navigation("Policyholder");
                });

            modelBuilder.Entity("InsuranceClaims.Domain.Entities.Policy", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("PolicyPolicyholders");
                });

            modelBuilder.Entity("InsuranceClaims.Domain.Entities.Policyholder", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("PolicyPolicyholders");
                });

            modelBuilder.Entity("InsuranceClaims.Domain.Entities.User", b =>
                {
                    b.Navigation("SubmittedClaims");
                });
#pragma warning restore 612, 618
        }
    }
}
